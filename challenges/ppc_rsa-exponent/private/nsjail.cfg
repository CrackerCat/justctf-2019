name: "ppc-rsa-exponent"

mode: LISTEN
hostname: "ppc-rsa-exponent"

bindhost: "0.0.0.0"
port: 1337

# The default is 0,1,2 anyway - but let's be explicit
pass_fd: 0
pass_fd: 1
pass_fd: 2

# Should the current environment variables be kept when executing the binary?
keep_env: false

# IMPORTANT: must be in sync with whatever CGRP path is in run_task.sh
cgroup_mem_mount: "/jailed_cgroups/memory"
cgroup_pids_mount: "/jailed_cgroups/pids"
cgroup_cpu_mount: "/jailed_cgroups/cpu"

# Maximum number of PIDs in the cgroup (i.e. we won't be able to spawn more than the number here)
cgroup_pids_max: 2
# Maximum memory usage in the cgroup in bytes (i.e. attempts to allocate more will fail)
cgroup_mem_max: 33554432 # 32 MiB -- setting it too low will make task swap to disk

# timeout
time_limit: 50
# number of ms per sec of CPU time the jailed process can use
cgroup_cpu_ms_per_sec: 950
# amount of CPU time the process can consume in seconds
rlimit_cpu: 46
# Maximum number of CPUs to use: 0 - no limit
max_cpus: 1

# Memory limits via rlimit
# max size of process's virtual memory (address space) in MiB
rlimit_as: 64
# max size of a core file in MiB; 0 means no core dump files are created
rlimit_core: 0
# max size of files the process may create in MiB
rlimit_fsize: 0
# max size of the process stack, in MiB
rlimit_stack: 6
# value one greater than the maximum file descriptor number that can be opened by jailed process
rlimit_nofile: 5    # carefully adjusted!

# DO NOT change
rlimit_stack_type: SOFT
rlimit_nproc_type: SOFT

# Should /proc be mounted as R/O?
mount_proc: false

mount {
    src: "/task"
    dst: "/task"
    is_bind: true
    rw: false
}

mount {
    src: "/lib"
    dst: "/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/lib64"
    dst: "/lib64"
    is_bind: true
    rw: false
}

# Not needed for the task
mount {
    src: "/usr"
    dst: "/usr"
    is_bind: true
    rw: false
}

# Not needed for the task
# NOTE: If you want the task to use e.g. /bin/sh,
# You probably also want to change the number of opened processes!
mount {
    src: "/bin"
    dst: "/bin"
    is_bind: true
    rw: false
}

exec_bin {
    path: "/usr/bin/python3"
    arg0: "python3"
    arg: "/task/public.py"
    # Can be used to test the environment
    # but note that it requires /bin mount and [probably] more than 1 max pids limit!
    #path: "/bin/sh"
}

seccomp_string: "POLICY example {						"
seccomp_string:	"	ERRNO(1337) { getuid, getgid, geteuid, getegid },	"
seccomp_string:	"	ERRNO(0) { ptrace },					"
seccomp_string: "	ALLOW { execve }					"
seccomp_string:	"}								"
seccomp_string:	"USE example DEFAULT ALLOW "
seccomp_log: true
