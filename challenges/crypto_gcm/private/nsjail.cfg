name: "crypto_gcm"

mode: LISTEN
hostname: "crypto_gcm"

bindhost: "0.0.0.0"
port: 1337

# The default is 0,1,2 anyway
# disable stderr
pass_fd: 0
pass_fd: 1
stderr_to_null: true

# Should the current environment variables be kept when executing the binary?
keep_env: false

# IMPORTANT: must be in sync with whatever CGRP path is in run_task.sh
cgroup_mem_mount: "/jailed_cgroups/memory"
cgroup_pids_mount: "/jailed_cgroups/pids"
cgroup_cpu_mount: "/jailed_cgroups/cpu"

# Maximum number of PIDs in the cgroup (i.e. we won't be able to spawn more than the number here)
cgroup_pids_max: 1
# Maximum memory usage in the cgroup in bytes (i.e. attempts to allocate more will fail)
cgroup_mem_max: 8388608 # 8 MiB -- Note that too low will make it swapped to disk which is bad

# timeout
time_limit: 600
# number of ms per sec of CPU time the jailed process can use
cgroup_cpu_ms_per_sec: 900
# amount of CPU time the process can consume in seconds
rlimit_cpu: 280
# Maximum number of CPUs to use: 0 - no limit
max_cpus: 1

# Memory limits via rlimit
# max size of process's virtual memory (address space) in MiB
rlimit_as: 64
# max size of a core file in MiB; 0 means no core dump files are created
rlimit_core: 0
# max size of files the process may create in MiB
rlimit_fsize: 0
# max size of the process stack, in MiB
rlimit_stack: 6
# value one greater than the maximum file descriptor number that can be opened by jailed process
rlimit_nofile: 5    # carefully adjusted!

# DO NOT change
rlimit_stack_type: SOFT
rlimit_nproc_type: SOFT

# Should /proc be mounted as R/O?
mount_proc: false

mount {
    src: "/lib"
    dst: "/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/usr/lib"
    dst: "/usr/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/lib64"
    dst: "/lib64"
    is_bind: true
    rw: false
}

# Not needed for the task
#mount {
#    src: "/usr"
#    dst: "/usr"
#    is_bind: true
#    rw: false
#}

# Not needed for the task
# NOTE: If you want the task to use e.g. /bin/sh,
# You probably also want to change the number of opened processes!
#mount {
#    src: "/bin"
#    dst: "/bin"
#    is_bind: true
#    rw: false
#}

mount {
    src: "/home/jailed/gcm"
    dst: "/home/jailed/gcm"
    is_bind: true
    rw: false
}

exec_bin {
    path: "/home/jailed/gcm"

    # Can be used to test the environment
    # but note that it requires /bin mount and [probably] more than 1 max pids limit!
    #path: "/bin/sh"
}

# We don't pass any seccomp policy
# as it is already enforced by the challenge
#seccomp_string: "POLICY task {}"
# Setting it to true makes audit write seccomp logs to dmesg
#seccomp_log: true
