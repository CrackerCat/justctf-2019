user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /dev/stdout warn;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    gzip on;
    gunzip on;

    #
    autoindex on;
    server_tokens off;

    log_format  main_log  '$remote_addr - $upstream_cache_status [$time_local] "$request" '
                               '$status $request_time $body_bytes_sent '
                               '"$http_user_agent" "$http_x_forwarded_for" "$request_uri" cache_key="$language$request_uri"';

    access_log /dev/stdout main_log;
    #error_log /dev/stdout debug;

    fastcgi_temp_path /nginx/fastcgi;
    uwsgi_temp_path /nginx/uwsgi;
    scgi_temp_path /nginx/scgi;
    client_body_temp_path /nginx/body;
    proxy_temp_path    /nginx/proxy;
    proxy_cache_path /nginx/cache levels=1:2 keys_zone=mycache:10m  max_size=10g inactive=5m use_temp_path=off;

    map $http_accept_language $language {
        default 'en';
        '~^(.+?),' $1;
    }

    # random meme
    map $msec $random_meme {
        default 1;
        ~(.*)0\.(.*) 1;
        ~(.*)1\.(.*) 1;
        ~(.*)2\.(.*) 1;
        ~(.*)3\.(.*) 2;
        ~(.*)4\.(.*) 2;
        ~(.*)5\.(.*) 2;
        ~(.*)6\.(.*) 3;
        ~(.*)7\.(.*) 3;
        ~(.*)8\.(.*) 3;
        ~(.*)9\.(.*) 3;
    }

    map $uri $sandbox_hash {
        default '';
        '~^/([a-zA-Z0-9_-]+)/' $1;
    }

    map $uri $sandbox_uri {
        default '';
        '~^/([a-zA-Z0-9_-]+)/(.*)' $2;
    }
    map $sandbox_uri $sandbox_endpoint {
        default "404";
        '' "main";
        'admin/' "admin";
        '~^api' $sandbox_uri;
        '~^static' $sandbox_uri;
    }

    server {
        listen 80;

        root /public/pages/;

        proxy_cache mycache;
        proxy_cache_valid 404 30s;
        proxy_cache_valid 500 502 503 401 403 422 1s;
        proxy_cache_valid 30s;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_key "$language$request_uri";

        location = / {
            proxy_cache off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://127.0.0.1:8080;
        }

        location / {
            if ($sandbox_hash = '') {
                rewrite .* /404/ last;
            }
            if ($sandbox_endpoint = '404') {
                rewrite .* /404/ last;
            }
            if (!-f "/home/justctf/tmp/$sandbox_hash/server.pid") {
                rewrite .* /expire/ last;
            }
            rewrite .* /$sandbox_endpoint last;
        }

        #########################
        # sandbox not exists
        location = /expire/ {
            internal;
            add_header Content-Type text/plain always;
            return 404 'sandbox expired or not exists';
        }

        # api entrypoint
        location /api {
            internal;

            proxy_set_header Accept-Encoding "gzip";
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Sandbox-Path $sandbox_hash;

            proxy_pass http://unix:/home/justctf/tmp/$sandbox_hash/sock.unix;
        }

        # main page
        location = /main {
            internal;

            set $meme_uri "static/$random_meme.$language.png";
            if (-f "/public/$meme_uri") {
                rewrite .* /internal/main/ last;
            }

            set $meme_uri "static/$random_meme.en.png";
            if (-f "/public/$meme_uri") {
                rewrite .* /internal/main/ last;
            }

            set $meme_uri "static/0.png";
            rewrite .* /internal/main/ last;
        }

        location /internal/main/ {
            internal;
            sub_filter '__MEME__' '$meme_uri';
            sub_filter_once on;
            try_files $uri /main.html =404;
        }

        # admin page
        location = /admin {
           internal;
           try_files $uri /admin.html =404;
        }

        # static files
        location /static {
            internal;
            alias /public/static/;
        }

        # 404
        location /404 {
            internal;
            proxy_cache off;
            return 404;
        }
    }
}
